ARG IMAGE_VER=2020.06

FROM nvcr.io/hpc/autodock:${IMAGE_VER}

ARG VERSION=2023.1.1

LABEL maintainer="DHN Chandan <biogrids.io@gmail.com>"
LABEL version=${VERSION}
LABEL github="https://github.com/bio-grids/molecular_dynamics_utils"

SHELL [ "/bin/bash", "--login", "-c" ]

# install cuda keyring
RUN apt-get install --yes --no-install-recommends --quiet wget
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-keyring_1.0-1_all.deb
RUN yes | dpkg -i cuda-keyring_1.0-1_all.deb

# update os
RUN apt-get update -y

# install build dependencies
ARG build_deps="\
    build-essential \
    ca-certificates \
    pdb2pqr \
    wget \
    bzip2 \
    curl \
    swig \
    git"
RUN apt-get install --yes $build_deps

# install app dependencies
ARG app_deps="\
    pdb2pqr \
    libxml2 libsm6 libxext6 libxrender-dev libgomp1 libgl1 libboost-all-dev \
    "
RUN apt-get install --yes --no-install-recommends --quiet $app_deps

WORKDIR /tmp

# install miniconda
ENV MINICONDA_VERSION latest
ENV CONDA_DIR /miniconda3
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-$MINICONDA_VERSION-Linux-x86_64.sh -O miniconda.sh
RUN chmod +x miniconda.sh
RUN bash ./miniconda.sh -b -p $CONDA_DIR
RUN rm miniconda.sh

# make non-activate conda commands available
ENV PATH=$CONDA_DIR/bin:$PATH

# make conda activate command available from /bin/bash --login shells
RUN echo ". $CONDA_DIR/etc/profile.d/conda.sh" >> ~/.profile

# make conda activate command available from /bin/bash --interative shells
RUN conda init bash

# build the conda environment
RUN conda update --name base --channel defaults conda
RUN conda install --name base --channel conda-forge mamba
RUN conda config --prepend channels bioconda
RUN conda config --prepend channels conda-forge
RUN mamba install --yes \
    openbabel \
    mgltools \
    zlib \
    pip \
    numpy \
    pandas \
    scipy \
    rdkit \
    boost-cpp \
    sphinx \
    sphinx_rtd_theme \
    fpocket \
    pdbfixer \
    pymol-open-source \
    jupyterlab
RUN conda clean --all --yes

# install adfr
RUN curl -SL https://ccsb.scripps.edu/adfr/download/1038 | tar -zx; \
    cd ADFRsuite_x86_64Linux_1.0; ./install.sh -d /opt/adfr/ -c 1 -l

ENV PATH=$PATH:/opt/adfr/bin/

# install dockstring
RUN git clone https://github.com/dockstring/dockstring.git
RUN python -m pip install dockstring/.

# install AutoDockTools for pyhton3
RUN git clone https://github.com/Valdes-Tresanco-MS/AutoDockTools_py3.git
RUN python -m pip install AutoDockTools_py3/.

# install python packages
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt

# install vina
RUN git clone https://github.com/ccsb-scripps/AutoDock-Vina
WORKDIR /tmp/AutoDock-Vina/build/linux/release
RUN make
RUN mkdir -p /ubin
RUN cp vina /ubin/
RUN cp vina_split /ubin/

# clean os
RUN rm -rf /tmp/*
RUN rm -rf /var/lib/apt/lists/*
RUN apt-get remove -y $build_deps
RUN apt-get autoremove -y
RUN apt-get clean -y

# copy bin files and add to path
WORKDIR /ubin
COPY bin/ .
ENV PATH=$PATH:/ubin/

# make data work directory
RUN cd / && mkdir -p data
WORKDIR /data